// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/net.proto

#ifndef PROTOBUF_INCLUDED_proto_2fnet_2eproto
#define PROTOBUF_INCLUDED_proto_2fnet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto 

namespace protobuf_proto_2fnet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fnet_2eproto
namespace pblczero {
class EngineVersion;
class EngineVersionDefaultTypeInternal;
extern EngineVersionDefaultTypeInternal _EngineVersion_default_instance_;
class Format;
class FormatDefaultTypeInternal;
extern FormatDefaultTypeInternal _Format_default_instance_;
class Net;
class NetDefaultTypeInternal;
extern NetDefaultTypeInternal _Net_default_instance_;
class TrainingParams;
class TrainingParamsDefaultTypeInternal;
extern TrainingParamsDefaultTypeInternal _TrainingParams_default_instance_;
class Weights;
class WeightsDefaultTypeInternal;
extern WeightsDefaultTypeInternal _Weights_default_instance_;
class Weights_ConvBlock;
class Weights_ConvBlockDefaultTypeInternal;
extern Weights_ConvBlockDefaultTypeInternal _Weights_ConvBlock_default_instance_;
class Weights_Layer;
class Weights_LayerDefaultTypeInternal;
extern Weights_LayerDefaultTypeInternal _Weights_Layer_default_instance_;
class Weights_Residual;
class Weights_ResidualDefaultTypeInternal;
extern Weights_ResidualDefaultTypeInternal _Weights_Residual_default_instance_;
}  // namespace pblczero
namespace google {
namespace protobuf {
template<> ::pblczero::EngineVersion* Arena::CreateMaybeMessage<::pblczero::EngineVersion>(Arena*);
template<> ::pblczero::Format* Arena::CreateMaybeMessage<::pblczero::Format>(Arena*);
template<> ::pblczero::Net* Arena::CreateMaybeMessage<::pblczero::Net>(Arena*);
template<> ::pblczero::TrainingParams* Arena::CreateMaybeMessage<::pblczero::TrainingParams>(Arena*);
template<> ::pblczero::Weights* Arena::CreateMaybeMessage<::pblczero::Weights>(Arena*);
template<> ::pblczero::Weights_ConvBlock* Arena::CreateMaybeMessage<::pblczero::Weights_ConvBlock>(Arena*);
template<> ::pblczero::Weights_Layer* Arena::CreateMaybeMessage<::pblczero::Weights_Layer>(Arena*);
template<> ::pblczero::Weights_Residual* Arena::CreateMaybeMessage<::pblczero::Weights_Residual>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pblczero {

enum Format_Encoding {
  Format_Encoding_UNKNOWN = 0,
  Format_Encoding_LINEAR16 = 1,
  Format_Encoding_ZFP = 2
};
bool Format_Encoding_IsValid(int value);
const Format_Encoding Format_Encoding_Encoding_MIN = Format_Encoding_UNKNOWN;
const Format_Encoding Format_Encoding_Encoding_MAX = Format_Encoding_ZFP;
const int Format_Encoding_Encoding_ARRAYSIZE = Format_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* Format_Encoding_descriptor();
inline const ::std::string& Format_Encoding_Name(Format_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    Format_Encoding_descriptor(), value);
}
inline bool Format_Encoding_Parse(
    const ::std::string& name, Format_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Format_Encoding>(
    Format_Encoding_descriptor(), name, value);
}
// ===================================================================

class EngineVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.EngineVersion) */ {
 public:
  EngineVersion();
  virtual ~EngineVersion();

  EngineVersion(const EngineVersion& from);

  inline EngineVersion& operator=(const EngineVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EngineVersion(EngineVersion&& from) noexcept
    : EngineVersion() {
    *this = ::std::move(from);
  }

  inline EngineVersion& operator=(EngineVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EngineVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineVersion* internal_default_instance() {
    return reinterpret_cast<const EngineVersion*>(
               &_EngineVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EngineVersion* other);
  friend void swap(EngineVersion& a, EngineVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineVersion* New() const final {
    return CreateMaybeMessage<EngineVersion>(NULL);
  }

  EngineVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EngineVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EngineVersion& from);
  void MergeFrom(const EngineVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 major = 1;
  bool has_major() const;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // optional uint32 minor = 2;
  bool has_minor() const;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // optional uint32 patch = 3;
  bool has_patch() const;
  void clear_patch();
  static const int kPatchFieldNumber = 3;
  ::google::protobuf::uint32 patch() const;
  void set_patch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pblczero.EngineVersion)
 private:
  void set_has_major();
  void clear_has_major();
  void set_has_minor();
  void clear_has_minor();
  void set_has_patch();
  void clear_has_patch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  ::google::protobuf::uint32 patch_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Weights_Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.Layer) */ {
 public:
  Weights_Layer();
  virtual ~Weights_Layer();

  Weights_Layer(const Weights_Layer& from);

  inline Weights_Layer& operator=(const Weights_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Weights_Layer(Weights_Layer&& from) noexcept
    : Weights_Layer() {
    *this = ::std::move(from);
  }

  inline Weights_Layer& operator=(Weights_Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weights_Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weights_Layer* internal_default_instance() {
    return reinterpret_cast<const Weights_Layer*>(
               &_Weights_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Weights_Layer* other);
  friend void swap(Weights_Layer& a, Weights_Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weights_Layer* New() const final {
    return CreateMaybeMessage<Weights_Layer>(NULL);
  }

  Weights_Layer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Weights_Layer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Weights_Layer& from);
  void MergeFrom(const Weights_Layer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const void* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // optional float min_val = 1;
  bool has_min_val() const;
  void clear_min_val();
  static const int kMinValFieldNumber = 1;
  float min_val() const;
  void set_min_val(float value);

  // optional float max_val = 2;
  bool has_max_val() const;
  void clear_max_val();
  static const int kMaxValFieldNumber = 2;
  float max_val() const;
  void set_max_val(float value);

  // @@protoc_insertion_point(class_scope:pblczero.Weights.Layer)
 private:
  void set_has_min_val();
  void clear_has_min_val();
  void set_has_max_val();
  void clear_has_max_val();
  void set_has_params();
  void clear_has_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  float min_val_;
  float max_val_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Weights_ConvBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.ConvBlock) */ {
 public:
  Weights_ConvBlock();
  virtual ~Weights_ConvBlock();

  Weights_ConvBlock(const Weights_ConvBlock& from);

  inline Weights_ConvBlock& operator=(const Weights_ConvBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Weights_ConvBlock(Weights_ConvBlock&& from) noexcept
    : Weights_ConvBlock() {
    *this = ::std::move(from);
  }

  inline Weights_ConvBlock& operator=(Weights_ConvBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weights_ConvBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weights_ConvBlock* internal_default_instance() {
    return reinterpret_cast<const Weights_ConvBlock*>(
               &_Weights_ConvBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Weights_ConvBlock* other);
  friend void swap(Weights_ConvBlock& a, Weights_ConvBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weights_ConvBlock* New() const final {
    return CreateMaybeMessage<Weights_ConvBlock>(NULL);
  }

  Weights_ConvBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Weights_ConvBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Weights_ConvBlock& from);
  void MergeFrom(const Weights_ConvBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_ConvBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pblczero.Weights.Layer weights = 1;
  bool has_weights() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 1;
  private:
  const ::pblczero::Weights_Layer& _internal_weights() const;
  public:
  const ::pblczero::Weights_Layer& weights() const;
  ::pblczero::Weights_Layer* release_weights();
  ::pblczero::Weights_Layer* mutable_weights();
  void set_allocated_weights(::pblczero::Weights_Layer* weights);

  // optional .pblczero.Weights.Layer biases = 2;
  bool has_biases() const;
  void clear_biases();
  static const int kBiasesFieldNumber = 2;
  private:
  const ::pblczero::Weights_Layer& _internal_biases() const;
  public:
  const ::pblczero::Weights_Layer& biases() const;
  ::pblczero::Weights_Layer* release_biases();
  ::pblczero::Weights_Layer* mutable_biases();
  void set_allocated_biases(::pblczero::Weights_Layer* biases);

  // optional .pblczero.Weights.Layer bn_means = 3;
  bool has_bn_means() const;
  void clear_bn_means();
  static const int kBnMeansFieldNumber = 3;
  private:
  const ::pblczero::Weights_Layer& _internal_bn_means() const;
  public:
  const ::pblczero::Weights_Layer& bn_means() const;
  ::pblczero::Weights_Layer* release_bn_means();
  ::pblczero::Weights_Layer* mutable_bn_means();
  void set_allocated_bn_means(::pblczero::Weights_Layer* bn_means);

  // optional .pblczero.Weights.Layer bn_stddivs = 4;
  bool has_bn_stddivs() const;
  void clear_bn_stddivs();
  static const int kBnStddivsFieldNumber = 4;
  private:
  const ::pblczero::Weights_Layer& _internal_bn_stddivs() const;
  public:
  const ::pblczero::Weights_Layer& bn_stddivs() const;
  ::pblczero::Weights_Layer* release_bn_stddivs();
  ::pblczero::Weights_Layer* mutable_bn_stddivs();
  void set_allocated_bn_stddivs(::pblczero::Weights_Layer* bn_stddivs);

  // @@protoc_insertion_point(class_scope:pblczero.Weights.ConvBlock)
 private:
  void set_has_weights();
  void clear_has_weights();
  void set_has_biases();
  void clear_has_biases();
  void set_has_bn_means();
  void clear_has_bn_means();
  void set_has_bn_stddivs();
  void clear_has_bn_stddivs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pblczero::Weights_Layer* weights_;
  ::pblczero::Weights_Layer* biases_;
  ::pblczero::Weights_Layer* bn_means_;
  ::pblczero::Weights_Layer* bn_stddivs_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Weights_Residual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights.Residual) */ {
 public:
  Weights_Residual();
  virtual ~Weights_Residual();

  Weights_Residual(const Weights_Residual& from);

  inline Weights_Residual& operator=(const Weights_Residual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Weights_Residual(Weights_Residual&& from) noexcept
    : Weights_Residual() {
    *this = ::std::move(from);
  }

  inline Weights_Residual& operator=(Weights_Residual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weights_Residual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weights_Residual* internal_default_instance() {
    return reinterpret_cast<const Weights_Residual*>(
               &_Weights_Residual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Weights_Residual* other);
  friend void swap(Weights_Residual& a, Weights_Residual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weights_Residual* New() const final {
    return CreateMaybeMessage<Weights_Residual>(NULL);
  }

  Weights_Residual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Weights_Residual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Weights_Residual& from);
  void MergeFrom(const Weights_Residual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights_Residual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pblczero.Weights.ConvBlock conv1 = 1;
  bool has_conv1() const;
  void clear_conv1();
  static const int kConv1FieldNumber = 1;
  private:
  const ::pblczero::Weights_ConvBlock& _internal_conv1() const;
  public:
  const ::pblczero::Weights_ConvBlock& conv1() const;
  ::pblczero::Weights_ConvBlock* release_conv1();
  ::pblczero::Weights_ConvBlock* mutable_conv1();
  void set_allocated_conv1(::pblczero::Weights_ConvBlock* conv1);

  // optional .pblczero.Weights.ConvBlock conv2 = 2;
  bool has_conv2() const;
  void clear_conv2();
  static const int kConv2FieldNumber = 2;
  private:
  const ::pblczero::Weights_ConvBlock& _internal_conv2() const;
  public:
  const ::pblczero::Weights_ConvBlock& conv2() const;
  ::pblczero::Weights_ConvBlock* release_conv2();
  ::pblczero::Weights_ConvBlock* mutable_conv2();
  void set_allocated_conv2(::pblczero::Weights_ConvBlock* conv2);

  // @@protoc_insertion_point(class_scope:pblczero.Weights.Residual)
 private:
  void set_has_conv1();
  void clear_has_conv1();
  void set_has_conv2();
  void clear_has_conv2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pblczero::Weights_ConvBlock* conv1_;
  ::pblczero::Weights_ConvBlock* conv2_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Weights : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Weights) */ {
 public:
  Weights();
  virtual ~Weights();

  Weights(const Weights& from);

  inline Weights& operator=(const Weights& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Weights(Weights&& from) noexcept
    : Weights() {
    *this = ::std::move(from);
  }

  inline Weights& operator=(Weights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weights* internal_default_instance() {
    return reinterpret_cast<const Weights*>(
               &_Weights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Weights* other);
  friend void swap(Weights& a, Weights& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weights* New() const final {
    return CreateMaybeMessage<Weights>(NULL);
  }

  Weights* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Weights>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Weights& from);
  void MergeFrom(const Weights& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Weights_Layer Layer;
  typedef Weights_ConvBlock ConvBlock;
  typedef Weights_Residual Residual;

  // accessors -------------------------------------------------------

  // repeated .pblczero.Weights.Residual residual = 2;
  int residual_size() const;
  void clear_residual();
  static const int kResidualFieldNumber = 2;
  ::pblczero::Weights_Residual* mutable_residual(int index);
  ::google::protobuf::RepeatedPtrField< ::pblczero::Weights_Residual >*
      mutable_residual();
  const ::pblczero::Weights_Residual& residual(int index) const;
  ::pblczero::Weights_Residual* add_residual();
  const ::google::protobuf::RepeatedPtrField< ::pblczero::Weights_Residual >&
      residual() const;

  // optional .pblczero.Weights.ConvBlock input = 1;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  private:
  const ::pblczero::Weights_ConvBlock& _internal_input() const;
  public:
  const ::pblczero::Weights_ConvBlock& input() const;
  ::pblczero::Weights_ConvBlock* release_input();
  ::pblczero::Weights_ConvBlock* mutable_input();
  void set_allocated_input(::pblczero::Weights_ConvBlock* input);

  // optional .pblczero.Weights.ConvBlock policy = 3;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 3;
  private:
  const ::pblczero::Weights_ConvBlock& _internal_policy() const;
  public:
  const ::pblczero::Weights_ConvBlock& policy() const;
  ::pblczero::Weights_ConvBlock* release_policy();
  ::pblczero::Weights_ConvBlock* mutable_policy();
  void set_allocated_policy(::pblczero::Weights_ConvBlock* policy);

  // optional .pblczero.Weights.Layer ip_pol_w = 4;
  bool has_ip_pol_w() const;
  void clear_ip_pol_w();
  static const int kIpPolWFieldNumber = 4;
  private:
  const ::pblczero::Weights_Layer& _internal_ip_pol_w() const;
  public:
  const ::pblczero::Weights_Layer& ip_pol_w() const;
  ::pblczero::Weights_Layer* release_ip_pol_w();
  ::pblczero::Weights_Layer* mutable_ip_pol_w();
  void set_allocated_ip_pol_w(::pblczero::Weights_Layer* ip_pol_w);

  // optional .pblczero.Weights.Layer ip_pol_b = 5;
  bool has_ip_pol_b() const;
  void clear_ip_pol_b();
  static const int kIpPolBFieldNumber = 5;
  private:
  const ::pblczero::Weights_Layer& _internal_ip_pol_b() const;
  public:
  const ::pblczero::Weights_Layer& ip_pol_b() const;
  ::pblczero::Weights_Layer* release_ip_pol_b();
  ::pblczero::Weights_Layer* mutable_ip_pol_b();
  void set_allocated_ip_pol_b(::pblczero::Weights_Layer* ip_pol_b);

  // optional .pblczero.Weights.ConvBlock value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  private:
  const ::pblczero::Weights_ConvBlock& _internal_value() const;
  public:
  const ::pblczero::Weights_ConvBlock& value() const;
  ::pblczero::Weights_ConvBlock* release_value();
  ::pblczero::Weights_ConvBlock* mutable_value();
  void set_allocated_value(::pblczero::Weights_ConvBlock* value);

  // optional .pblczero.Weights.Layer ip1_val_w = 7;
  bool has_ip1_val_w() const;
  void clear_ip1_val_w();
  static const int kIp1ValWFieldNumber = 7;
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_val_w() const;
  public:
  const ::pblczero::Weights_Layer& ip1_val_w() const;
  ::pblczero::Weights_Layer* release_ip1_val_w();
  ::pblczero::Weights_Layer* mutable_ip1_val_w();
  void set_allocated_ip1_val_w(::pblczero::Weights_Layer* ip1_val_w);

  // optional .pblczero.Weights.Layer ip1_val_b = 8;
  bool has_ip1_val_b() const;
  void clear_ip1_val_b();
  static const int kIp1ValBFieldNumber = 8;
  private:
  const ::pblczero::Weights_Layer& _internal_ip1_val_b() const;
  public:
  const ::pblczero::Weights_Layer& ip1_val_b() const;
  ::pblczero::Weights_Layer* release_ip1_val_b();
  ::pblczero::Weights_Layer* mutable_ip1_val_b();
  void set_allocated_ip1_val_b(::pblczero::Weights_Layer* ip1_val_b);

  // optional .pblczero.Weights.Layer ip2_val_w = 9;
  bool has_ip2_val_w() const;
  void clear_ip2_val_w();
  static const int kIp2ValWFieldNumber = 9;
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_val_w() const;
  public:
  const ::pblczero::Weights_Layer& ip2_val_w() const;
  ::pblczero::Weights_Layer* release_ip2_val_w();
  ::pblczero::Weights_Layer* mutable_ip2_val_w();
  void set_allocated_ip2_val_w(::pblczero::Weights_Layer* ip2_val_w);

  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  bool has_ip2_val_b() const;
  void clear_ip2_val_b();
  static const int kIp2ValBFieldNumber = 10;
  private:
  const ::pblczero::Weights_Layer& _internal_ip2_val_b() const;
  public:
  const ::pblczero::Weights_Layer& ip2_val_b() const;
  ::pblczero::Weights_Layer* release_ip2_val_b();
  ::pblczero::Weights_Layer* mutable_ip2_val_b();
  void set_allocated_ip2_val_b(::pblczero::Weights_Layer* ip2_val_b);

  // @@protoc_insertion_point(class_scope:pblczero.Weights)
 private:
  void set_has_input();
  void clear_has_input();
  void set_has_policy();
  void clear_has_policy();
  void set_has_ip_pol_w();
  void clear_has_ip_pol_w();
  void set_has_ip_pol_b();
  void clear_has_ip_pol_b();
  void set_has_value();
  void clear_has_value();
  void set_has_ip1_val_w();
  void clear_has_ip1_val_w();
  void set_has_ip1_val_b();
  void clear_has_ip1_val_b();
  void set_has_ip2_val_w();
  void clear_has_ip2_val_w();
  void set_has_ip2_val_b();
  void clear_has_ip2_val_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pblczero::Weights_Residual > residual_;
  ::pblczero::Weights_ConvBlock* input_;
  ::pblczero::Weights_ConvBlock* policy_;
  ::pblczero::Weights_Layer* ip_pol_w_;
  ::pblczero::Weights_Layer* ip_pol_b_;
  ::pblczero::Weights_ConvBlock* value_;
  ::pblczero::Weights_Layer* ip1_val_w_;
  ::pblczero::Weights_Layer* ip1_val_b_;
  ::pblczero::Weights_Layer* ip2_val_w_;
  ::pblczero::Weights_Layer* ip2_val_b_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrainingParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.TrainingParams) */ {
 public:
  TrainingParams();
  virtual ~TrainingParams();

  TrainingParams(const TrainingParams& from);

  inline TrainingParams& operator=(const TrainingParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrainingParams(TrainingParams&& from) noexcept
    : TrainingParams() {
    *this = ::std::move(from);
  }

  inline TrainingParams& operator=(TrainingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingParams* internal_default_instance() {
    return reinterpret_cast<const TrainingParams*>(
               &_TrainingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrainingParams* other);
  friend void swap(TrainingParams& a, TrainingParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrainingParams* New() const final {
    return CreateMaybeMessage<TrainingParams>(NULL);
  }

  TrainingParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrainingParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrainingParams& from);
  void MergeFrom(const TrainingParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lc0_params = 6;
  bool has_lc0_params() const;
  void clear_lc0_params();
  static const int kLc0ParamsFieldNumber = 6;
  const ::std::string& lc0_params() const;
  void set_lc0_params(const ::std::string& value);
  #if LANG_CXX11
  void set_lc0_params(::std::string&& value);
  #endif
  void set_lc0_params(const char* value);
  void set_lc0_params(const char* value, size_t size);
  ::std::string* mutable_lc0_params();
  ::std::string* release_lc0_params();
  void set_allocated_lc0_params(::std::string* lc0_params);

  // optional uint32 training_steps = 1;
  bool has_training_steps() const;
  void clear_training_steps();
  static const int kTrainingStepsFieldNumber = 1;
  ::google::protobuf::uint32 training_steps() const;
  void set_training_steps(::google::protobuf::uint32 value);

  // optional float learning_rate = 2;
  bool has_learning_rate() const;
  void clear_learning_rate();
  static const int kLearningRateFieldNumber = 2;
  float learning_rate() const;
  void set_learning_rate(float value);

  // optional float mse_loss = 3;
  bool has_mse_loss() const;
  void clear_mse_loss();
  static const int kMseLossFieldNumber = 3;
  float mse_loss() const;
  void set_mse_loss(float value);

  // optional float policy_loss = 4;
  bool has_policy_loss() const;
  void clear_policy_loss();
  static const int kPolicyLossFieldNumber = 4;
  float policy_loss() const;
  void set_policy_loss(float value);

  // optional float accuracy = 5;
  bool has_accuracy() const;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 5;
  float accuracy() const;
  void set_accuracy(float value);

  // @@protoc_insertion_point(class_scope:pblczero.TrainingParams)
 private:
  void set_has_training_steps();
  void clear_has_training_steps();
  void set_has_learning_rate();
  void clear_has_learning_rate();
  void set_has_mse_loss();
  void clear_has_mse_loss();
  void set_has_policy_loss();
  void clear_has_policy_loss();
  void set_has_accuracy();
  void clear_has_accuracy();
  void set_has_lc0_params();
  void clear_has_lc0_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lc0_params_;
  ::google::protobuf::uint32 training_steps_;
  float learning_rate_;
  float mse_loss_;
  float policy_loss_;
  float accuracy_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Format : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Format) */ {
 public:
  Format();
  virtual ~Format();

  Format(const Format& from);

  inline Format& operator=(const Format& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Format(Format&& from) noexcept
    : Format() {
    *this = ::std::move(from);
  }

  inline Format& operator=(Format&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Format& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Format* internal_default_instance() {
    return reinterpret_cast<const Format*>(
               &_Format_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Format* other);
  friend void swap(Format& a, Format& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Format* New() const final {
    return CreateMaybeMessage<Format>(NULL);
  }

  Format* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Format>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Format& from);
  void MergeFrom(const Format& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Format* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Format_Encoding Encoding;
  static const Encoding UNKNOWN =
    Format_Encoding_UNKNOWN;
  static const Encoding LINEAR16 =
    Format_Encoding_LINEAR16;
  static const Encoding ZFP =
    Format_Encoding_ZFP;
  static inline bool Encoding_IsValid(int value) {
    return Format_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    Format_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    Format_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    Format_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return Format_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return Format_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return Format_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pblczero.Format.Encoding weights_encoding = 1;
  bool has_weights_encoding() const;
  void clear_weights_encoding();
  static const int kWeightsEncodingFieldNumber = 1;
  ::pblczero::Format_Encoding weights_encoding() const;
  void set_weights_encoding(::pblczero::Format_Encoding value);

  // @@protoc_insertion_point(class_scope:pblczero.Format)
 private:
  void set_has_weights_encoding();
  void clear_has_weights_encoding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int weights_encoding_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Net : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pblczero.Net) */ {
 public:
  Net();
  virtual ~Net();

  Net(const Net& from);

  inline Net& operator=(const Net& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Net(Net&& from) noexcept
    : Net() {
    *this = ::std::move(from);
  }

  inline Net& operator=(Net&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Net& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Net* internal_default_instance() {
    return reinterpret_cast<const Net*>(
               &_Net_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Net* other);
  friend void swap(Net& a, Net& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Net* New() const final {
    return CreateMaybeMessage<Net>(NULL);
  }

  Net* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Net>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Net& from);
  void MergeFrom(const Net& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Net* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string license = 2;
  bool has_license() const;
  void clear_license();
  static const int kLicenseFieldNumber = 2;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  #if LANG_CXX11
  void set_license(::std::string&& value);
  #endif
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // optional .pblczero.EngineVersion min_version = 3;
  bool has_min_version() const;
  void clear_min_version();
  static const int kMinVersionFieldNumber = 3;
  private:
  const ::pblczero::EngineVersion& _internal_min_version() const;
  public:
  const ::pblczero::EngineVersion& min_version() const;
  ::pblczero::EngineVersion* release_min_version();
  ::pblczero::EngineVersion* mutable_min_version();
  void set_allocated_min_version(::pblczero::EngineVersion* min_version);

  // optional .pblczero.Format format = 4;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 4;
  private:
  const ::pblczero::Format& _internal_format() const;
  public:
  const ::pblczero::Format& format() const;
  ::pblczero::Format* release_format();
  ::pblczero::Format* mutable_format();
  void set_allocated_format(::pblczero::Format* format);

  // optional .pblczero.TrainingParams training_params = 5;
  bool has_training_params() const;
  void clear_training_params();
  static const int kTrainingParamsFieldNumber = 5;
  private:
  const ::pblczero::TrainingParams& _internal_training_params() const;
  public:
  const ::pblczero::TrainingParams& training_params() const;
  ::pblczero::TrainingParams* release_training_params();
  ::pblczero::TrainingParams* mutable_training_params();
  void set_allocated_training_params(::pblczero::TrainingParams* training_params);

  // optional .pblczero.Weights weights = 10;
  bool has_weights() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 10;
  private:
  const ::pblczero::Weights& _internal_weights() const;
  public:
  const ::pblczero::Weights& weights() const;
  ::pblczero::Weights* release_weights();
  ::pblczero::Weights* mutable_weights();
  void set_allocated_weights(::pblczero::Weights* weights);

  // optional fixed32 magic = 1;
  bool has_magic() const;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pblczero.Net)
 private:
  void set_has_magic();
  void clear_has_magic();
  void set_has_license();
  void clear_has_license();
  void set_has_min_version();
  void clear_has_min_version();
  void set_has_format();
  void clear_has_format();
  void set_has_training_params();
  void clear_has_training_params();
  void set_has_weights();
  void clear_has_weights();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  ::pblczero::EngineVersion* min_version_;
  ::pblczero::Format* format_;
  ::pblczero::TrainingParams* training_params_;
  ::pblczero::Weights* weights_;
  ::google::protobuf::uint32 magic_;
  friend struct ::protobuf_proto_2fnet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineVersion

// optional uint32 major = 1;
inline bool EngineVersion::has_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EngineVersion::set_has_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EngineVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EngineVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 EngineVersion::major() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.major)
  return major_;
}
inline void EngineVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.major)
}

// optional uint32 minor = 2;
inline bool EngineVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EngineVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EngineVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EngineVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 EngineVersion::minor() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.minor)
  return minor_;
}
inline void EngineVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.minor)
}

// optional uint32 patch = 3;
inline bool EngineVersion::has_patch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EngineVersion::set_has_patch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EngineVersion::clear_has_patch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EngineVersion::clear_patch() {
  patch_ = 0u;
  clear_has_patch();
}
inline ::google::protobuf::uint32 EngineVersion::patch() const {
  // @@protoc_insertion_point(field_get:pblczero.EngineVersion.patch)
  return patch_;
}
inline void EngineVersion::set_patch(::google::protobuf::uint32 value) {
  set_has_patch();
  patch_ = value;
  // @@protoc_insertion_point(field_set:pblczero.EngineVersion.patch)
}

// -------------------------------------------------------------------

// Weights_Layer

// optional float min_val = 1;
inline bool Weights_Layer::has_min_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weights_Layer::set_has_min_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weights_Layer::clear_has_min_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weights_Layer::clear_min_val() {
  min_val_ = 0;
  clear_has_min_val();
}
inline float Weights_Layer::min_val() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.min_val)
  return min_val_;
}
inline void Weights_Layer::set_min_val(float value) {
  set_has_min_val();
  min_val_ = value;
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.min_val)
}

// optional float max_val = 2;
inline bool Weights_Layer::has_max_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Weights_Layer::set_has_max_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Weights_Layer::clear_has_max_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Weights_Layer::clear_max_val() {
  max_val_ = 0;
  clear_has_max_val();
}
inline float Weights_Layer::max_val() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.max_val)
  return max_val_;
}
inline void Weights_Layer::set_max_val(float value) {
  set_has_max_val();
  max_val_ = value;
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.max_val)
}

// optional bytes params = 3;
inline bool Weights_Layer::has_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weights_Layer::set_has_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weights_Layer::clear_has_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weights_Layer::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
inline const ::std::string& Weights_Layer::params() const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.Layer.params)
  return params_.GetNoArena();
}
inline void Weights_Layer::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pblczero.Weights.Layer.params)
}
#if LANG_CXX11
inline void Weights_Layer::set_params(::std::string&& value) {
  set_has_params();
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pblczero.Weights.Layer.params)
}
#endif
inline void Weights_Layer::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pblczero.Weights.Layer.params)
}
inline void Weights_Layer::set_params(const void* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pblczero.Weights.Layer.params)
}
inline ::std::string* Weights_Layer::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Layer.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Weights_Layer::release_params() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Layer.params)
  if (!has_params()) {
    return NULL;
  }
  clear_has_params();
  return params_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Weights_Layer::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Layer.params)
}

// -------------------------------------------------------------------

// Weights_ConvBlock

// optional .pblczero.Weights.Layer weights = 1;
inline bool Weights_ConvBlock::has_weights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weights_ConvBlock::set_has_weights() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weights_ConvBlock::clear_has_weights() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weights_ConvBlock::clear_weights() {
  if (weights_ != NULL) weights_->Clear();
  clear_has_weights();
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_weights() const {
  return *weights_;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::weights() const {
  const ::pblczero::Weights_Layer* p = weights_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.weights)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_weights() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.weights)
  clear_has_weights();
  ::pblczero::Weights_Layer* temp = weights_;
  weights_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_weights() {
  set_has_weights();
  if (weights_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    weights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.weights)
  return weights_;
}
inline void Weights_ConvBlock::set_allocated_weights(::pblczero::Weights_Layer* weights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weights_;
  }
  if (weights) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    set_has_weights();
  } else {
    clear_has_weights();
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.weights)
}

// optional .pblczero.Weights.Layer biases = 2;
inline bool Weights_ConvBlock::has_biases() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weights_ConvBlock::set_has_biases() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weights_ConvBlock::clear_has_biases() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weights_ConvBlock::clear_biases() {
  if (biases_ != NULL) biases_->Clear();
  clear_has_biases();
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_biases() const {
  return *biases_;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::biases() const {
  const ::pblczero::Weights_Layer* p = biases_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.biases)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_biases() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.biases)
  clear_has_biases();
  ::pblczero::Weights_Layer* temp = biases_;
  biases_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_biases() {
  set_has_biases();
  if (biases_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    biases_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.biases)
  return biases_;
}
inline void Weights_ConvBlock::set_allocated_biases(::pblczero::Weights_Layer* biases) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete biases_;
  }
  if (biases) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      biases = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, biases, submessage_arena);
    }
    set_has_biases();
  } else {
    clear_has_biases();
  }
  biases_ = biases;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.biases)
}

// optional .pblczero.Weights.Layer bn_means = 3;
inline bool Weights_ConvBlock::has_bn_means() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Weights_ConvBlock::set_has_bn_means() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Weights_ConvBlock::clear_has_bn_means() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Weights_ConvBlock::clear_bn_means() {
  if (bn_means_ != NULL) bn_means_->Clear();
  clear_has_bn_means();
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_means() const {
  return *bn_means_;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_means() const {
  const ::pblczero::Weights_Layer* p = bn_means_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_means)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_means() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_means)
  clear_has_bn_means();
  ::pblczero::Weights_Layer* temp = bn_means_;
  bn_means_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_means() {
  set_has_bn_means();
  if (bn_means_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    bn_means_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_means)
  return bn_means_;
}
inline void Weights_ConvBlock::set_allocated_bn_means(::pblczero::Weights_Layer* bn_means) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bn_means_;
  }
  if (bn_means) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bn_means = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bn_means, submessage_arena);
    }
    set_has_bn_means();
  } else {
    clear_has_bn_means();
  }
  bn_means_ = bn_means;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_means)
}

// optional .pblczero.Weights.Layer bn_stddivs = 4;
inline bool Weights_ConvBlock::has_bn_stddivs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Weights_ConvBlock::set_has_bn_stddivs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Weights_ConvBlock::clear_has_bn_stddivs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Weights_ConvBlock::clear_bn_stddivs() {
  if (bn_stddivs_ != NULL) bn_stddivs_->Clear();
  clear_has_bn_stddivs();
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::_internal_bn_stddivs() const {
  return *bn_stddivs_;
}
inline const ::pblczero::Weights_Layer& Weights_ConvBlock::bn_stddivs() const {
  const ::pblczero::Weights_Layer* p = bn_stddivs_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ConvBlock.bn_stddivs)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::release_bn_stddivs() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ConvBlock.bn_stddivs)
  clear_has_bn_stddivs();
  ::pblczero::Weights_Layer* temp = bn_stddivs_;
  bn_stddivs_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights_ConvBlock::mutable_bn_stddivs() {
  set_has_bn_stddivs();
  if (bn_stddivs_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    bn_stddivs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ConvBlock.bn_stddivs)
  return bn_stddivs_;
}
inline void Weights_ConvBlock::set_allocated_bn_stddivs(::pblczero::Weights_Layer* bn_stddivs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bn_stddivs_;
  }
  if (bn_stddivs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bn_stddivs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bn_stddivs, submessage_arena);
    }
    set_has_bn_stddivs();
  } else {
    clear_has_bn_stddivs();
  }
  bn_stddivs_ = bn_stddivs;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ConvBlock.bn_stddivs)
}

// -------------------------------------------------------------------

// Weights_Residual

// optional .pblczero.Weights.ConvBlock conv1 = 1;
inline bool Weights_Residual::has_conv1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weights_Residual::set_has_conv1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weights_Residual::clear_has_conv1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weights_Residual::clear_conv1() {
  if (conv1_ != NULL) conv1_->Clear();
  clear_has_conv1();
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::_internal_conv1() const {
  return *conv1_;
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::conv1() const {
  const ::pblczero::Weights_ConvBlock* p = conv1_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.Residual.conv1)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_ConvBlock*>(
      &::pblczero::_Weights_ConvBlock_default_instance_);
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::release_conv1() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Residual.conv1)
  clear_has_conv1();
  ::pblczero::Weights_ConvBlock* temp = conv1_;
  conv1_ = NULL;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::mutable_conv1() {
  set_has_conv1();
  if (conv1_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaNoVirtual());
    conv1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Residual.conv1)
  return conv1_;
}
inline void Weights_Residual::set_allocated_conv1(::pblczero::Weights_ConvBlock* conv1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conv1_;
  }
  if (conv1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conv1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conv1, submessage_arena);
    }
    set_has_conv1();
  } else {
    clear_has_conv1();
  }
  conv1_ = conv1;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Residual.conv1)
}

// optional .pblczero.Weights.ConvBlock conv2 = 2;
inline bool Weights_Residual::has_conv2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weights_Residual::set_has_conv2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weights_Residual::clear_has_conv2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weights_Residual::clear_conv2() {
  if (conv2_ != NULL) conv2_->Clear();
  clear_has_conv2();
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::_internal_conv2() const {
  return *conv2_;
}
inline const ::pblczero::Weights_ConvBlock& Weights_Residual::conv2() const {
  const ::pblczero::Weights_ConvBlock* p = conv2_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.Residual.conv2)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_ConvBlock*>(
      &::pblczero::_Weights_ConvBlock_default_instance_);
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::release_conv2() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.Residual.conv2)
  clear_has_conv2();
  ::pblczero::Weights_ConvBlock* temp = conv2_;
  conv2_ = NULL;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights_Residual::mutable_conv2() {
  set_has_conv2();
  if (conv2_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaNoVirtual());
    conv2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.Residual.conv2)
  return conv2_;
}
inline void Weights_Residual::set_allocated_conv2(::pblczero::Weights_ConvBlock* conv2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conv2_;
  }
  if (conv2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conv2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conv2, submessage_arena);
    }
    set_has_conv2();
  } else {
    clear_has_conv2();
  }
  conv2_ = conv2;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.Residual.conv2)
}

// -------------------------------------------------------------------

// Weights

// optional .pblczero.Weights.ConvBlock input = 1;
inline bool Weights::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weights::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weights::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weights::clear_input() {
  if (input_ != NULL) input_->Clear();
  clear_has_input();
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_input() const {
  return *input_;
}
inline const ::pblczero::Weights_ConvBlock& Weights::input() const {
  const ::pblczero::Weights_ConvBlock* p = input_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.input)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_ConvBlock*>(
      &::pblczero::_Weights_ConvBlock_default_instance_);
}
inline ::pblczero::Weights_ConvBlock* Weights::release_input() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.input)
  clear_has_input();
  ::pblczero::Weights_ConvBlock* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_input() {
  set_has_input();
  if (input_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.input)
  return input_;
}
inline void Weights::set_allocated_input(::pblczero::Weights_ConvBlock* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    set_has_input();
  } else {
    clear_has_input();
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.input)
}

// repeated .pblczero.Weights.Residual residual = 2;
inline int Weights::residual_size() const {
  return residual_.size();
}
inline void Weights::clear_residual() {
  residual_.Clear();
}
inline ::pblczero::Weights_Residual* Weights::mutable_residual(int index) {
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.residual)
  return residual_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pblczero::Weights_Residual >*
Weights::mutable_residual() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Weights.residual)
  return &residual_;
}
inline const ::pblczero::Weights_Residual& Weights::residual(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Weights.residual)
  return residual_.Get(index);
}
inline ::pblczero::Weights_Residual* Weights::add_residual() {
  // @@protoc_insertion_point(field_add:pblczero.Weights.residual)
  return residual_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pblczero::Weights_Residual >&
Weights::residual() const {
  // @@protoc_insertion_point(field_list:pblczero.Weights.residual)
  return residual_;
}

// optional .pblczero.Weights.ConvBlock policy = 3;
inline bool Weights::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weights::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weights::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weights::clear_policy() {
  if (policy_ != NULL) policy_->Clear();
  clear_has_policy();
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_policy() const {
  return *policy_;
}
inline const ::pblczero::Weights_ConvBlock& Weights::policy() const {
  const ::pblczero::Weights_ConvBlock* p = policy_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.policy)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_ConvBlock*>(
      &::pblczero::_Weights_ConvBlock_default_instance_);
}
inline ::pblczero::Weights_ConvBlock* Weights::release_policy() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.policy)
  clear_has_policy();
  ::pblczero::Weights_ConvBlock* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_policy() {
  set_has_policy();
  if (policy_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaNoVirtual());
    policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.policy)
  return policy_;
}
inline void Weights::set_allocated_policy(::pblczero::Weights_ConvBlock* policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete policy_;
  }
  if (policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    set_has_policy();
  } else {
    clear_has_policy();
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.policy)
}

// optional .pblczero.Weights.Layer ip_pol_w = 4;
inline bool Weights::has_ip_pol_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Weights::set_has_ip_pol_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Weights::clear_has_ip_pol_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Weights::clear_ip_pol_w() {
  if (ip_pol_w_ != NULL) ip_pol_w_->Clear();
  clear_has_ip_pol_w();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip_pol_w() const {
  return *ip_pol_w_;
}
inline const ::pblczero::Weights_Layer& Weights::ip_pol_w() const {
  const ::pblczero::Weights_Layer* p = ip_pol_w_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip_pol_w)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip_pol_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip_pol_w)
  clear_has_ip_pol_w();
  ::pblczero::Weights_Layer* temp = ip_pol_w_;
  ip_pol_w_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip_pol_w() {
  set_has_ip_pol_w();
  if (ip_pol_w_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip_pol_w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip_pol_w)
  return ip_pol_w_;
}
inline void Weights::set_allocated_ip_pol_w(::pblczero::Weights_Layer* ip_pol_w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip_pol_w_;
  }
  if (ip_pol_w) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip_pol_w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_pol_w, submessage_arena);
    }
    set_has_ip_pol_w();
  } else {
    clear_has_ip_pol_w();
  }
  ip_pol_w_ = ip_pol_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip_pol_w)
}

// optional .pblczero.Weights.Layer ip_pol_b = 5;
inline bool Weights::has_ip_pol_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Weights::set_has_ip_pol_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Weights::clear_has_ip_pol_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Weights::clear_ip_pol_b() {
  if (ip_pol_b_ != NULL) ip_pol_b_->Clear();
  clear_has_ip_pol_b();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip_pol_b() const {
  return *ip_pol_b_;
}
inline const ::pblczero::Weights_Layer& Weights::ip_pol_b() const {
  const ::pblczero::Weights_Layer* p = ip_pol_b_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip_pol_b)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip_pol_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip_pol_b)
  clear_has_ip_pol_b();
  ::pblczero::Weights_Layer* temp = ip_pol_b_;
  ip_pol_b_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip_pol_b() {
  set_has_ip_pol_b();
  if (ip_pol_b_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip_pol_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip_pol_b)
  return ip_pol_b_;
}
inline void Weights::set_allocated_ip_pol_b(::pblczero::Weights_Layer* ip_pol_b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip_pol_b_;
  }
  if (ip_pol_b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip_pol_b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_pol_b, submessage_arena);
    }
    set_has_ip_pol_b();
  } else {
    clear_has_ip_pol_b();
  }
  ip_pol_b_ = ip_pol_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip_pol_b)
}

// optional .pblczero.Weights.ConvBlock value = 6;
inline bool Weights::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Weights::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Weights::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Weights::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::pblczero::Weights_ConvBlock& Weights::_internal_value() const {
  return *value_;
}
inline const ::pblczero::Weights_ConvBlock& Weights::value() const {
  const ::pblczero::Weights_ConvBlock* p = value_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.value)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_ConvBlock*>(
      &::pblczero::_Weights_ConvBlock_default_instance_);
}
inline ::pblczero::Weights_ConvBlock* Weights::release_value() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.value)
  clear_has_value();
  ::pblczero::Weights_ConvBlock* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::pblczero::Weights_ConvBlock* Weights::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_ConvBlock>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.value)
  return value_;
}
inline void Weights::set_allocated_value(::pblczero::Weights_ConvBlock* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.value)
}

// optional .pblczero.Weights.Layer ip1_val_w = 7;
inline bool Weights::has_ip1_val_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Weights::set_has_ip1_val_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Weights::clear_has_ip1_val_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Weights::clear_ip1_val_w() {
  if (ip1_val_w_ != NULL) ip1_val_w_->Clear();
  clear_has_ip1_val_w();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_val_w() const {
  return *ip1_val_w_;
}
inline const ::pblczero::Weights_Layer& Weights::ip1_val_w() const {
  const ::pblczero::Weights_Layer* p = ip1_val_w_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_val_w)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_val_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_val_w)
  clear_has_ip1_val_w();
  ::pblczero::Weights_Layer* temp = ip1_val_w_;
  ip1_val_w_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_val_w() {
  set_has_ip1_val_w();
  if (ip1_val_w_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip1_val_w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_val_w)
  return ip1_val_w_;
}
inline void Weights::set_allocated_ip1_val_w(::pblczero::Weights_Layer* ip1_val_w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip1_val_w_;
  }
  if (ip1_val_w) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip1_val_w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip1_val_w, submessage_arena);
    }
    set_has_ip1_val_w();
  } else {
    clear_has_ip1_val_w();
  }
  ip1_val_w_ = ip1_val_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_val_w)
}

// optional .pblczero.Weights.Layer ip1_val_b = 8;
inline bool Weights::has_ip1_val_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Weights::set_has_ip1_val_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Weights::clear_has_ip1_val_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Weights::clear_ip1_val_b() {
  if (ip1_val_b_ != NULL) ip1_val_b_->Clear();
  clear_has_ip1_val_b();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip1_val_b() const {
  return *ip1_val_b_;
}
inline const ::pblczero::Weights_Layer& Weights::ip1_val_b() const {
  const ::pblczero::Weights_Layer* p = ip1_val_b_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip1_val_b)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip1_val_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip1_val_b)
  clear_has_ip1_val_b();
  ::pblczero::Weights_Layer* temp = ip1_val_b_;
  ip1_val_b_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip1_val_b() {
  set_has_ip1_val_b();
  if (ip1_val_b_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip1_val_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip1_val_b)
  return ip1_val_b_;
}
inline void Weights::set_allocated_ip1_val_b(::pblczero::Weights_Layer* ip1_val_b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip1_val_b_;
  }
  if (ip1_val_b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip1_val_b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip1_val_b, submessage_arena);
    }
    set_has_ip1_val_b();
  } else {
    clear_has_ip1_val_b();
  }
  ip1_val_b_ = ip1_val_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip1_val_b)
}

// optional .pblczero.Weights.Layer ip2_val_w = 9;
inline bool Weights::has_ip2_val_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Weights::set_has_ip2_val_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Weights::clear_has_ip2_val_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Weights::clear_ip2_val_w() {
  if (ip2_val_w_ != NULL) ip2_val_w_->Clear();
  clear_has_ip2_val_w();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_val_w() const {
  return *ip2_val_w_;
}
inline const ::pblczero::Weights_Layer& Weights::ip2_val_w() const {
  const ::pblczero::Weights_Layer* p = ip2_val_w_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_val_w)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_val_w() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_val_w)
  clear_has_ip2_val_w();
  ::pblczero::Weights_Layer* temp = ip2_val_w_;
  ip2_val_w_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_val_w() {
  set_has_ip2_val_w();
  if (ip2_val_w_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip2_val_w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_val_w)
  return ip2_val_w_;
}
inline void Weights::set_allocated_ip2_val_w(::pblczero::Weights_Layer* ip2_val_w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip2_val_w_;
  }
  if (ip2_val_w) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip2_val_w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip2_val_w, submessage_arena);
    }
    set_has_ip2_val_w();
  } else {
    clear_has_ip2_val_w();
  }
  ip2_val_w_ = ip2_val_w;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_val_w)
}

// optional .pblczero.Weights.Layer ip2_val_b = 10;
inline bool Weights::has_ip2_val_b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Weights::set_has_ip2_val_b() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Weights::clear_has_ip2_val_b() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Weights::clear_ip2_val_b() {
  if (ip2_val_b_ != NULL) ip2_val_b_->Clear();
  clear_has_ip2_val_b();
}
inline const ::pblczero::Weights_Layer& Weights::_internal_ip2_val_b() const {
  return *ip2_val_b_;
}
inline const ::pblczero::Weights_Layer& Weights::ip2_val_b() const {
  const ::pblczero::Weights_Layer* p = ip2_val_b_;
  // @@protoc_insertion_point(field_get:pblczero.Weights.ip2_val_b)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights_Layer*>(
      &::pblczero::_Weights_Layer_default_instance_);
}
inline ::pblczero::Weights_Layer* Weights::release_ip2_val_b() {
  // @@protoc_insertion_point(field_release:pblczero.Weights.ip2_val_b)
  clear_has_ip2_val_b();
  ::pblczero::Weights_Layer* temp = ip2_val_b_;
  ip2_val_b_ = NULL;
  return temp;
}
inline ::pblczero::Weights_Layer* Weights::mutable_ip2_val_b() {
  set_has_ip2_val_b();
  if (ip2_val_b_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights_Layer>(GetArenaNoVirtual());
    ip2_val_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Weights.ip2_val_b)
  return ip2_val_b_;
}
inline void Weights::set_allocated_ip2_val_b(::pblczero::Weights_Layer* ip2_val_b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip2_val_b_;
  }
  if (ip2_val_b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip2_val_b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip2_val_b, submessage_arena);
    }
    set_has_ip2_val_b();
  } else {
    clear_has_ip2_val_b();
  }
  ip2_val_b_ = ip2_val_b;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Weights.ip2_val_b)
}

// -------------------------------------------------------------------

// TrainingParams

// optional uint32 training_steps = 1;
inline bool TrainingParams::has_training_steps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrainingParams::set_has_training_steps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrainingParams::clear_has_training_steps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrainingParams::clear_training_steps() {
  training_steps_ = 0u;
  clear_has_training_steps();
}
inline ::google::protobuf::uint32 TrainingParams::training_steps() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.training_steps)
  return training_steps_;
}
inline void TrainingParams::set_training_steps(::google::protobuf::uint32 value) {
  set_has_training_steps();
  training_steps_ = value;
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.training_steps)
}

// optional float learning_rate = 2;
inline bool TrainingParams::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrainingParams::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrainingParams::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrainingParams::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
inline float TrainingParams::learning_rate() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.learning_rate)
  return learning_rate_;
}
inline void TrainingParams::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.learning_rate)
}

// optional float mse_loss = 3;
inline bool TrainingParams::has_mse_loss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrainingParams::set_has_mse_loss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrainingParams::clear_has_mse_loss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrainingParams::clear_mse_loss() {
  mse_loss_ = 0;
  clear_has_mse_loss();
}
inline float TrainingParams::mse_loss() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.mse_loss)
  return mse_loss_;
}
inline void TrainingParams::set_mse_loss(float value) {
  set_has_mse_loss();
  mse_loss_ = value;
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.mse_loss)
}

// optional float policy_loss = 4;
inline bool TrainingParams::has_policy_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrainingParams::set_has_policy_loss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrainingParams::clear_has_policy_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrainingParams::clear_policy_loss() {
  policy_loss_ = 0;
  clear_has_policy_loss();
}
inline float TrainingParams::policy_loss() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.policy_loss)
  return policy_loss_;
}
inline void TrainingParams::set_policy_loss(float value) {
  set_has_policy_loss();
  policy_loss_ = value;
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.policy_loss)
}

// optional float accuracy = 5;
inline bool TrainingParams::has_accuracy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrainingParams::set_has_accuracy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrainingParams::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrainingParams::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline float TrainingParams::accuracy() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.accuracy)
  return accuracy_;
}
inline void TrainingParams::set_accuracy(float value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.accuracy)
}

// optional string lc0_params = 6;
inline bool TrainingParams::has_lc0_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrainingParams::set_has_lc0_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrainingParams::clear_has_lc0_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrainingParams::clear_lc0_params() {
  lc0_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lc0_params();
}
inline const ::std::string& TrainingParams::lc0_params() const {
  // @@protoc_insertion_point(field_get:pblczero.TrainingParams.lc0_params)
  return lc0_params_.GetNoArena();
}
inline void TrainingParams::set_lc0_params(const ::std::string& value) {
  set_has_lc0_params();
  lc0_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pblczero.TrainingParams.lc0_params)
}
#if LANG_CXX11
inline void TrainingParams::set_lc0_params(::std::string&& value) {
  set_has_lc0_params();
  lc0_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pblczero.TrainingParams.lc0_params)
}
#endif
inline void TrainingParams::set_lc0_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lc0_params();
  lc0_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pblczero.TrainingParams.lc0_params)
}
inline void TrainingParams::set_lc0_params(const char* value, size_t size) {
  set_has_lc0_params();
  lc0_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pblczero.TrainingParams.lc0_params)
}
inline ::std::string* TrainingParams::mutable_lc0_params() {
  set_has_lc0_params();
  // @@protoc_insertion_point(field_mutable:pblczero.TrainingParams.lc0_params)
  return lc0_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_lc0_params() {
  // @@protoc_insertion_point(field_release:pblczero.TrainingParams.lc0_params)
  if (!has_lc0_params()) {
    return NULL;
  }
  clear_has_lc0_params();
  return lc0_params_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_lc0_params(::std::string* lc0_params) {
  if (lc0_params != NULL) {
    set_has_lc0_params();
  } else {
    clear_has_lc0_params();
  }
  lc0_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lc0_params);
  // @@protoc_insertion_point(field_set_allocated:pblczero.TrainingParams.lc0_params)
}

// -------------------------------------------------------------------

// Format

// optional .pblczero.Format.Encoding weights_encoding = 1;
inline bool Format::has_weights_encoding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Format::set_has_weights_encoding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Format::clear_has_weights_encoding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Format::clear_weights_encoding() {
  weights_encoding_ = 0;
  clear_has_weights_encoding();
}
inline ::pblczero::Format_Encoding Format::weights_encoding() const {
  // @@protoc_insertion_point(field_get:pblczero.Format.weights_encoding)
  return static_cast< ::pblczero::Format_Encoding >(weights_encoding_);
}
inline void Format::set_weights_encoding(::pblczero::Format_Encoding value) {
  assert(::pblczero::Format_Encoding_IsValid(value));
  set_has_weights_encoding();
  weights_encoding_ = value;
  // @@protoc_insertion_point(field_set:pblczero.Format.weights_encoding)
}

// -------------------------------------------------------------------

// Net

// optional fixed32 magic = 1;
inline bool Net::has_magic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Net::set_has_magic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Net::clear_has_magic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Net::clear_magic() {
  magic_ = 0u;
  clear_has_magic();
}
inline ::google::protobuf::uint32 Net::magic() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.magic)
  return magic_;
}
inline void Net::set_magic(::google::protobuf::uint32 value) {
  set_has_magic();
  magic_ = value;
  // @@protoc_insertion_point(field_set:pblczero.Net.magic)
}

// optional string license = 2;
inline bool Net::has_license() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net::set_has_license() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net::clear_has_license() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
inline const ::std::string& Net::license() const {
  // @@protoc_insertion_point(field_get:pblczero.Net.license)
  return license_.GetNoArena();
}
inline void Net::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pblczero.Net.license)
}
#if LANG_CXX11
inline void Net::set_license(::std::string&& value) {
  set_has_license();
  license_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pblczero.Net.license)
}
#endif
inline void Net::set_license(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pblczero.Net.license)
}
inline void Net::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pblczero.Net.license)
}
inline ::std::string* Net::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:pblczero.Net.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Net::release_license() {
  // @@protoc_insertion_point(field_release:pblczero.Net.license)
  if (!has_license()) {
    return NULL;
  }
  clear_has_license();
  return license_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Net::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.license)
}

// optional .pblczero.EngineVersion min_version = 3;
inline bool Net::has_min_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Net::set_has_min_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Net::clear_has_min_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Net::clear_min_version() {
  if (min_version_ != NULL) min_version_->Clear();
  clear_has_min_version();
}
inline const ::pblczero::EngineVersion& Net::_internal_min_version() const {
  return *min_version_;
}
inline const ::pblczero::EngineVersion& Net::min_version() const {
  const ::pblczero::EngineVersion* p = min_version_;
  // @@protoc_insertion_point(field_get:pblczero.Net.min_version)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::EngineVersion*>(
      &::pblczero::_EngineVersion_default_instance_);
}
inline ::pblczero::EngineVersion* Net::release_min_version() {
  // @@protoc_insertion_point(field_release:pblczero.Net.min_version)
  clear_has_min_version();
  ::pblczero::EngineVersion* temp = min_version_;
  min_version_ = NULL;
  return temp;
}
inline ::pblczero::EngineVersion* Net::mutable_min_version() {
  set_has_min_version();
  if (min_version_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::EngineVersion>(GetArenaNoVirtual());
    min_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Net.min_version)
  return min_version_;
}
inline void Net::set_allocated_min_version(::pblczero::EngineVersion* min_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_version_;
  }
  if (min_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_version, submessage_arena);
    }
    set_has_min_version();
  } else {
    clear_has_min_version();
  }
  min_version_ = min_version;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.min_version)
}

// optional .pblczero.Format format = 4;
inline bool Net::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Net::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Net::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Net::clear_format() {
  if (format_ != NULL) format_->Clear();
  clear_has_format();
}
inline const ::pblczero::Format& Net::_internal_format() const {
  return *format_;
}
inline const ::pblczero::Format& Net::format() const {
  const ::pblczero::Format* p = format_;
  // @@protoc_insertion_point(field_get:pblczero.Net.format)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Format*>(
      &::pblczero::_Format_default_instance_);
}
inline ::pblczero::Format* Net::release_format() {
  // @@protoc_insertion_point(field_release:pblczero.Net.format)
  clear_has_format();
  ::pblczero::Format* temp = format_;
  format_ = NULL;
  return temp;
}
inline ::pblczero::Format* Net::mutable_format() {
  set_has_format();
  if (format_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Format>(GetArenaNoVirtual());
    format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Net.format)
  return format_;
}
inline void Net::set_allocated_format(::pblczero::Format* format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete format_;
  }
  if (format) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      format = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    set_has_format();
  } else {
    clear_has_format();
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.format)
}

// optional .pblczero.TrainingParams training_params = 5;
inline bool Net::has_training_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Net::set_has_training_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Net::clear_has_training_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Net::clear_training_params() {
  if (training_params_ != NULL) training_params_->Clear();
  clear_has_training_params();
}
inline const ::pblczero::TrainingParams& Net::_internal_training_params() const {
  return *training_params_;
}
inline const ::pblczero::TrainingParams& Net::training_params() const {
  const ::pblczero::TrainingParams* p = training_params_;
  // @@protoc_insertion_point(field_get:pblczero.Net.training_params)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::TrainingParams*>(
      &::pblczero::_TrainingParams_default_instance_);
}
inline ::pblczero::TrainingParams* Net::release_training_params() {
  // @@protoc_insertion_point(field_release:pblczero.Net.training_params)
  clear_has_training_params();
  ::pblczero::TrainingParams* temp = training_params_;
  training_params_ = NULL;
  return temp;
}
inline ::pblczero::TrainingParams* Net::mutable_training_params() {
  set_has_training_params();
  if (training_params_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::TrainingParams>(GetArenaNoVirtual());
    training_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Net.training_params)
  return training_params_;
}
inline void Net::set_allocated_training_params(::pblczero::TrainingParams* training_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete training_params_;
  }
  if (training_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      training_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, training_params, submessage_arena);
    }
    set_has_training_params();
  } else {
    clear_has_training_params();
  }
  training_params_ = training_params;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.training_params)
}

// optional .pblczero.Weights weights = 10;
inline bool Net::has_weights() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Net::set_has_weights() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Net::clear_has_weights() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Net::clear_weights() {
  if (weights_ != NULL) weights_->Clear();
  clear_has_weights();
}
inline const ::pblczero::Weights& Net::_internal_weights() const {
  return *weights_;
}
inline const ::pblczero::Weights& Net::weights() const {
  const ::pblczero::Weights* p = weights_;
  // @@protoc_insertion_point(field_get:pblczero.Net.weights)
  return p != NULL ? *p : *reinterpret_cast<const ::pblczero::Weights*>(
      &::pblczero::_Weights_default_instance_);
}
inline ::pblczero::Weights* Net::release_weights() {
  // @@protoc_insertion_point(field_release:pblczero.Net.weights)
  clear_has_weights();
  ::pblczero::Weights* temp = weights_;
  weights_ = NULL;
  return temp;
}
inline ::pblczero::Weights* Net::mutable_weights() {
  set_has_weights();
  if (weights_ == NULL) {
    auto* p = CreateMaybeMessage<::pblczero::Weights>(GetArenaNoVirtual());
    weights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pblczero.Net.weights)
  return weights_;
}
inline void Net::set_allocated_weights(::pblczero::Weights* weights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weights_;
  }
  if (weights) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    set_has_weights();
  } else {
    clear_has_weights();
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Net.weights)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pblczero

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pblczero::Format_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::Format_Encoding>() {
  return ::pblczero::Format_Encoding_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fnet_2eproto
