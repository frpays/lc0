// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/net.proto

#include "proto/net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fnet_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EngineVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Format;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrainingParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Weights_Layer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Weights_ConvBlock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Weights_Residual;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fnet_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Weights;
}  // namespace protobuf_proto_2fnet_2eproto
namespace pblczero {
class EngineVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EngineVersion>
      _instance;
} _EngineVersion_default_instance_;
class Weights_LayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weights_Layer>
      _instance;
} _Weights_Layer_default_instance_;
class Weights_ConvBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weights_ConvBlock>
      _instance;
} _Weights_ConvBlock_default_instance_;
class Weights_ResidualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weights_Residual>
      _instance;
} _Weights_Residual_default_instance_;
class WeightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weights>
      _instance;
} _Weights_default_instance_;
class TrainingParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrainingParams>
      _instance;
} _TrainingParams_default_instance_;
class FormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Format>
      _instance;
} _Format_default_instance_;
class NetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Net>
      _instance;
} _Net_default_instance_;
}  // namespace pblczero
namespace protobuf_proto_2fnet_2eproto {
static void InitDefaultsEngineVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_EngineVersion_default_instance_;
    new (ptr) ::pblczero::EngineVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::EngineVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EngineVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEngineVersion}, {}};

static void InitDefaultsWeights_Layer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Weights_Layer_default_instance_;
    new (ptr) ::pblczero::Weights_Layer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Weights_Layer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Weights_Layer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWeights_Layer}, {}};

static void InitDefaultsWeights_ConvBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Weights_ConvBlock_default_instance_;
    new (ptr) ::pblczero::Weights_ConvBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Weights_ConvBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Weights_ConvBlock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWeights_ConvBlock}, {
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_Layer.base,}};

static void InitDefaultsWeights_Residual() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Weights_Residual_default_instance_;
    new (ptr) ::pblczero::Weights_Residual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Weights_Residual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Weights_Residual =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWeights_Residual}, {
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_ConvBlock.base,}};

static void InitDefaultsWeights() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Weights_default_instance_;
    new (ptr) ::pblczero::Weights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Weights::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Weights =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsWeights}, {
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_ConvBlock.base,
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_Residual.base,
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_Layer.base,}};

static void InitDefaultsTrainingParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_TrainingParams_default_instance_;
    new (ptr) ::pblczero::TrainingParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::TrainingParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrainingParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrainingParams}, {}};

static void InitDefaultsFormat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Format_default_instance_;
    new (ptr) ::pblczero::Format();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Format::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Format =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFormat}, {}};

static void InitDefaultsNet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pblczero::_Net_default_instance_;
    new (ptr) ::pblczero::Net();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pblczero::Net::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Net =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNet}, {
      &protobuf_proto_2fnet_2eproto::scc_info_EngineVersion.base,
      &protobuf_proto_2fnet_2eproto::scc_info_Format.base,
      &protobuf_proto_2fnet_2eproto::scc_info_TrainingParams.base,
      &protobuf_proto_2fnet_2eproto::scc_info_Weights.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EngineVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Weights_Layer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Weights_ConvBlock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Weights_Residual.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Weights.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrainingParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Format.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Net.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::EngineVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::EngineVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::EngineVersion, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::EngineVersion, minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::EngineVersion, patch_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Layer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Layer, min_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Layer, max_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Layer, params_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, biases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_ConvBlock, bn_stddivs_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Residual, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Residual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Residual, conv1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights_Residual, conv2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, residual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip_pol_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip_pol_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip1_val_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip1_val_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip2_val_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Weights, ip2_val_b_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, training_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, mse_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, policy_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::TrainingParams, lc0_params_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Format, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Format, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Format, weights_encoding_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, magic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, license_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, min_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, training_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pblczero::Net, weights_),
  5,
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::pblczero::EngineVersion)},
  { 11, 19, sizeof(::pblczero::Weights_Layer)},
  { 22, 31, sizeof(::pblczero::Weights_ConvBlock)},
  { 35, 42, sizeof(::pblczero::Weights_Residual)},
  { 44, 59, sizeof(::pblczero::Weights)},
  { 69, 80, sizeof(::pblczero::TrainingParams)},
  { 86, 92, sizeof(::pblczero::Format)},
  { 93, 104, sizeof(::pblczero::Net)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_EngineVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Weights_Layer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Weights_ConvBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Weights_Residual_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Weights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_TrainingParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Format_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pblczero::_Net_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/net.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017proto/net.proto\022\010pblczero\"<\n\rEngineVer"
      "sion\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005pa"
      "tch\030\003 \001(\r\"\232\006\n\007Weights\022*\n\005input\030\001 \001(\0132\033.p"
      "blczero.Weights.ConvBlock\022,\n\010residual\030\002 "
      "\003(\0132\032.pblczero.Weights.Residual\022+\n\006polic"
      "y\030\003 \001(\0132\033.pblczero.Weights.ConvBlock\022)\n\010"
      "ip_pol_w\030\004 \001(\0132\027.pblczero.Weights.Layer\022"
      ")\n\010ip_pol_b\030\005 \001(\0132\027.pblczero.Weights.Lay"
      "er\022*\n\005value\030\006 \001(\0132\033.pblczero.Weights.Con"
      "vBlock\022*\n\tip1_val_w\030\007 \001(\0132\027.pblczero.Wei"
      "ghts.Layer\022*\n\tip1_val_b\030\010 \001(\0132\027.pblczero"
      ".Weights.Layer\022*\n\tip2_val_w\030\t \001(\0132\027.pblc"
      "zero.Weights.Layer\022*\n\tip2_val_b\030\n \001(\0132\027."
      "pblczero.Weights.Layer\0329\n\005Layer\022\017\n\007min_v"
      "al\030\001 \001(\002\022\017\n\007max_val\030\002 \001(\002\022\016\n\006params\030\003 \001("
      "\014\032\266\001\n\tConvBlock\022(\n\007weights\030\001 \001(\0132\027.pblcz"
      "ero.Weights.Layer\022\'\n\006biases\030\002 \001(\0132\027.pblc"
      "zero.Weights.Layer\022)\n\010bn_means\030\003 \001(\0132\027.p"
      "blczero.Weights.Layer\022+\n\nbn_stddivs\030\004 \001("
      "\0132\027.pblczero.Weights.Layer\032b\n\010Residual\022*"
      "\n\005conv1\030\001 \001(\0132\033.pblczero.Weights.ConvBlo"
      "ck\022*\n\005conv2\030\002 \001(\0132\033.pblczero.Weights.Con"
      "vBlock\"\214\001\n\016TrainingParams\022\026\n\016training_st"
      "eps\030\001 \001(\r\022\025\n\rlearning_rate\030\002 \001(\002\022\020\n\010mse_"
      "loss\030\003 \001(\002\022\023\n\013policy_loss\030\004 \001(\002\022\020\n\010accur"
      "acy\030\005 \001(\002\022\022\n\nlc0_params\030\006 \001(\t\"m\n\006Format\022"
      "3\n\020weights_encoding\030\001 \001(\0162\031.pblczero.For"
      "mat.Encoding\".\n\010Encoding\022\013\n\007UNKNOWN\020\000\022\014\n"
      "\010LINEAR16\020\001\022\007\n\003ZFP\020\002\"\314\001\n\003Net\022\r\n\005magic\030\001 "
      "\001(\007\022\017\n\007license\030\002 \001(\t\022,\n\013min_version\030\003 \001("
      "\0132\027.pblczero.EngineVersion\022 \n\006format\030\004 \001"
      "(\0132\020.pblczero.Format\0221\n\017training_params\030"
      "\005 \001(\0132\030.pblczero.TrainingParams\022\"\n\007weigh"
      "ts\030\n \001(\0132\021.pblczero.Weights"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/net.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fnet_2eproto
namespace pblczero {
const ::google::protobuf::EnumDescriptor* Format_Encoding_descriptor() {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fnet_2eproto::file_level_enum_descriptors[0];
}
bool Format_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Format_Encoding Format::UNKNOWN;
const Format_Encoding Format::LINEAR16;
const Format_Encoding Format::ZFP;
const Format_Encoding Format::Encoding_MIN;
const Format_Encoding Format::Encoding_MAX;
const int Format::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EngineVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineVersion::kMajorFieldNumber;
const int EngineVersion::kMinorFieldNumber;
const int EngineVersion::kPatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineVersion::EngineVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_EngineVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.EngineVersion)
}
EngineVersion::EngineVersion(const EngineVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:pblczero.EngineVersion)
}

void EngineVersion::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

EngineVersion::~EngineVersion() {
  // @@protoc_insertion_point(destructor:pblczero.EngineVersion)
  SharedDtor();
}

void EngineVersion::SharedDtor() {
}

void EngineVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EngineVersion::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EngineVersion& EngineVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_EngineVersion.base);
  return *internal_default_instance();
}


void EngineVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.EngineVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patch_) -
        reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.EngineVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 patch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_patch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.EngineVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.EngineVersion)
  return false;
#undef DO_
}

void EngineVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.EngineVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // optional uint32 patch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->patch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.EngineVersion)
}

::google::protobuf::uint8* EngineVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.EngineVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // optional uint32 patch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->patch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.EngineVersion)
  return target;
}

size_t EngineVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.EngineVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // optional uint32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

    // optional uint32 patch = 3;
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.EngineVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EngineVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.EngineVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.EngineVersion)
    MergeFrom(*source);
  }
}

void EngineVersion::MergeFrom(const EngineVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.EngineVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_ = from.patch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EngineVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.EngineVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineVersion::CopyFrom(const EngineVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.EngineVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineVersion::IsInitialized() const {
  return true;
}

void EngineVersion::Swap(EngineVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineVersion::InternalSwap(EngineVersion* other) {
  using std::swap;
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  swap(patch_, other->patch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EngineVersion::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weights_Layer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weights_Layer::kMinValFieldNumber;
const int Weights_Layer::kMaxValFieldNumber;
const int Weights_Layer::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weights_Layer::Weights_Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_Layer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Weights.Layer)
}
Weights_Layer::Weights_Layer(const Weights_Layer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_params()) {
    params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  ::memcpy(&min_val_, &from.min_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_val_) -
    reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.Layer)
}

void Weights_Layer::SharedCtor() {
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_val_) -
      reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
}

Weights_Layer::~Weights_Layer() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.Layer)
  SharedDtor();
}

void Weights_Layer::SharedDtor() {
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Weights_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Weights_Layer::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weights_Layer& Weights_Layer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Weights_Layer.base);
  return *internal_default_instance();
}


void Weights_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    params_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&min_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_val_) -
        reinterpret_cast<char*>(&min_val_)) + sizeof(max_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weights_Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Weights.Layer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Weights.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Weights.Layer)
  return false;
#undef DO_
}

void Weights_Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Weights.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_val = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_val(), output);
  }

  // optional float max_val = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_val(), output);
  }

  // optional bytes params = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Weights.Layer)
}

::google::protobuf::uint8* Weights_Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_val = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_val(), target);
  }

  // optional float max_val = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_val(), target);
  }

  // optional bytes params = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.Layer)
  return target;
}

size_t Weights_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.Layer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->params());
    }

    // optional float min_val = 1;
    if (has_min_val()) {
      total_size += 1 + 4;
    }

    // optional float max_val = 2;
    if (has_max_val()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Weights_Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Weights.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Weights_Layer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weights_Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Weights.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Weights.Layer)
    MergeFrom(*source);
  }
}

void Weights_Layer::MergeFrom(const Weights_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_params();
      params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_val_ = from.min_val_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_val_ = from.max_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Weights_Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Weights.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weights_Layer::CopyFrom(const Weights_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_Layer::IsInitialized() const {
  return true;
}

void Weights_Layer::Swap(Weights_Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weights_Layer::InternalSwap(Weights_Layer* other) {
  using std::swap;
  params_.Swap(&other->params_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_val_, other->min_val_);
  swap(max_val_, other->max_val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Weights_Layer::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weights_ConvBlock::InitAsDefaultInstance() {
  ::pblczero::_Weights_ConvBlock_default_instance_._instance.get_mutable()->weights_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_ConvBlock_default_instance_._instance.get_mutable()->biases_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_ConvBlock_default_instance_._instance.get_mutable()->bn_means_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_ConvBlock_default_instance_._instance.get_mutable()->bn_stddivs_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weights_ConvBlock::kWeightsFieldNumber;
const int Weights_ConvBlock::kBiasesFieldNumber;
const int Weights_ConvBlock::kBnMeansFieldNumber;
const int Weights_ConvBlock::kBnStddivsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weights_ConvBlock::Weights_ConvBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_ConvBlock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Weights.ConvBlock)
}
Weights_ConvBlock::Weights_ConvBlock(const Weights_ConvBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weights()) {
    weights_ = new ::pblczero::Weights_Layer(*from.weights_);
  } else {
    weights_ = NULL;
  }
  if (from.has_biases()) {
    biases_ = new ::pblczero::Weights_Layer(*from.biases_);
  } else {
    biases_ = NULL;
  }
  if (from.has_bn_means()) {
    bn_means_ = new ::pblczero::Weights_Layer(*from.bn_means_);
  } else {
    bn_means_ = NULL;
  }
  if (from.has_bn_stddivs()) {
    bn_stddivs_ = new ::pblczero::Weights_Layer(*from.bn_stddivs_);
  } else {
    bn_stddivs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.ConvBlock)
}

void Weights_ConvBlock::SharedCtor() {
  ::memset(&weights_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bn_stddivs_) -
      reinterpret_cast<char*>(&weights_)) + sizeof(bn_stddivs_));
}

Weights_ConvBlock::~Weights_ConvBlock() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.ConvBlock)
  SharedDtor();
}

void Weights_ConvBlock::SharedDtor() {
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete biases_;
  if (this != internal_default_instance()) delete bn_means_;
  if (this != internal_default_instance()) delete bn_stddivs_;
}

void Weights_ConvBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Weights_ConvBlock::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weights_ConvBlock& Weights_ConvBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Weights_ConvBlock.base);
  return *internal_default_instance();
}


void Weights_ConvBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.ConvBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weights_ != NULL);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(biases_ != NULL);
      biases_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bn_means_ != NULL);
      bn_means_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bn_stddivs_ != NULL);
      bn_stddivs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weights_ConvBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Weights.ConvBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pblczero.Weights.Layer weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer biases = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_biases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer bn_means = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bn_means()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer bn_stddivs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bn_stddivs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Weights.ConvBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Weights.ConvBlock)
  return false;
#undef DO_
}

void Weights_ConvBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Weights.ConvBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.Layer weights = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_weights(), output);
  }

  // optional .pblczero.Weights.Layer biases = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_biases(), output);
  }

  // optional .pblczero.Weights.Layer bn_means = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bn_means(), output);
  }

  // optional .pblczero.Weights.Layer bn_stddivs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_bn_stddivs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Weights.ConvBlock)
}

::google::protobuf::uint8* Weights_ConvBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.ConvBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.Layer weights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_weights(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer biases = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_biases(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer bn_means = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bn_means(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer bn_stddivs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_bn_stddivs(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.ConvBlock)
  return target;
}

size_t Weights_ConvBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.ConvBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .pblczero.Weights.Layer weights = 1;
    if (has_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional .pblczero.Weights.Layer biases = 2;
    if (has_biases()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *biases_);
    }

    // optional .pblczero.Weights.Layer bn_means = 3;
    if (has_bn_means()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bn_means_);
    }

    // optional .pblczero.Weights.Layer bn_stddivs = 4;
    if (has_bn_stddivs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bn_stddivs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Weights_ConvBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Weights.ConvBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const Weights_ConvBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weights_ConvBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Weights.ConvBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Weights.ConvBlock)
    MergeFrom(*source);
  }
}

void Weights_ConvBlock::MergeFrom(const Weights_ConvBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.ConvBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weights()->::pblczero::Weights_Layer::MergeFrom(from.weights());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_biases()->::pblczero::Weights_Layer::MergeFrom(from.biases());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bn_means()->::pblczero::Weights_Layer::MergeFrom(from.bn_means());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bn_stddivs()->::pblczero::Weights_Layer::MergeFrom(from.bn_stddivs());
    }
  }
}

void Weights_ConvBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Weights.ConvBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weights_ConvBlock::CopyFrom(const Weights_ConvBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.ConvBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_ConvBlock::IsInitialized() const {
  return true;
}

void Weights_ConvBlock::Swap(Weights_ConvBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weights_ConvBlock::InternalSwap(Weights_ConvBlock* other) {
  using std::swap;
  swap(weights_, other->weights_);
  swap(biases_, other->biases_);
  swap(bn_means_, other->bn_means_);
  swap(bn_stddivs_, other->bn_stddivs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Weights_ConvBlock::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weights_Residual::InitAsDefaultInstance() {
  ::pblczero::_Weights_Residual_default_instance_._instance.get_mutable()->conv1_ = const_cast< ::pblczero::Weights_ConvBlock*>(
      ::pblczero::Weights_ConvBlock::internal_default_instance());
  ::pblczero::_Weights_Residual_default_instance_._instance.get_mutable()->conv2_ = const_cast< ::pblczero::Weights_ConvBlock*>(
      ::pblczero::Weights_ConvBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weights_Residual::kConv1FieldNumber;
const int Weights_Residual::kConv2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weights_Residual::Weights_Residual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Weights_Residual.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Weights.Residual)
}
Weights_Residual::Weights_Residual(const Weights_Residual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv1()) {
    conv1_ = new ::pblczero::Weights_ConvBlock(*from.conv1_);
  } else {
    conv1_ = NULL;
  }
  if (from.has_conv2()) {
    conv2_ = new ::pblczero::Weights_ConvBlock(*from.conv2_);
  } else {
    conv2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights.Residual)
}

void Weights_Residual::SharedCtor() {
  ::memset(&conv1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conv2_) -
      reinterpret_cast<char*>(&conv1_)) + sizeof(conv2_));
}

Weights_Residual::~Weights_Residual() {
  // @@protoc_insertion_point(destructor:pblczero.Weights.Residual)
  SharedDtor();
}

void Weights_Residual::SharedDtor() {
  if (this != internal_default_instance()) delete conv1_;
  if (this != internal_default_instance()) delete conv2_;
}

void Weights_Residual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Weights_Residual::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weights_Residual& Weights_Residual::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Weights_Residual.base);
  return *internal_default_instance();
}


void Weights_Residual::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights.Residual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv1_ != NULL);
      conv1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv2_ != NULL);
      conv2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weights_Residual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Weights.Residual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pblczero.Weights.ConvBlock conv1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conv1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.ConvBlock conv2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conv2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Weights.Residual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Weights.Residual)
  return false;
#undef DO_
}

void Weights_Residual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Weights.Residual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock conv1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_conv1(), output);
  }

  // optional .pblczero.Weights.ConvBlock conv2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_conv2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Weights.Residual)
}

::google::protobuf::uint8* Weights_Residual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights.Residual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock conv1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_conv1(), deterministic, target);
  }

  // optional .pblczero.Weights.ConvBlock conv2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_conv2(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights.Residual)
  return target;
}

size_t Weights_Residual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights.Residual)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .pblczero.Weights.ConvBlock conv1 = 1;
    if (has_conv1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *conv1_);
    }

    // optional .pblczero.Weights.ConvBlock conv2 = 2;
    if (has_conv2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *conv2_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Weights_Residual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Weights.Residual)
  GOOGLE_DCHECK_NE(&from, this);
  const Weights_Residual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weights_Residual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Weights.Residual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Weights.Residual)
    MergeFrom(*source);
  }
}

void Weights_Residual::MergeFrom(const Weights_Residual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights.Residual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv1()->::pblczero::Weights_ConvBlock::MergeFrom(from.conv1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_conv2()->::pblczero::Weights_ConvBlock::MergeFrom(from.conv2());
    }
  }
}

void Weights_Residual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Weights.Residual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weights_Residual::CopyFrom(const Weights_Residual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights.Residual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights_Residual::IsInitialized() const {
  return true;
}

void Weights_Residual::Swap(Weights_Residual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weights_Residual::InternalSwap(Weights_Residual* other) {
  using std::swap;
  swap(conv1_, other->conv1_);
  swap(conv2_, other->conv2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Weights_Residual::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weights::InitAsDefaultInstance() {
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->input_ = const_cast< ::pblczero::Weights_ConvBlock*>(
      ::pblczero::Weights_ConvBlock::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->policy_ = const_cast< ::pblczero::Weights_ConvBlock*>(
      ::pblczero::Weights_ConvBlock::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip_pol_w_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip_pol_b_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->value_ = const_cast< ::pblczero::Weights_ConvBlock*>(
      ::pblczero::Weights_ConvBlock::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip1_val_w_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip1_val_b_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip2_val_w_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
  ::pblczero::_Weights_default_instance_._instance.get_mutable()->ip2_val_b_ = const_cast< ::pblczero::Weights_Layer*>(
      ::pblczero::Weights_Layer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weights::kInputFieldNumber;
const int Weights::kResidualFieldNumber;
const int Weights::kPolicyFieldNumber;
const int Weights::kIpPolWFieldNumber;
const int Weights::kIpPolBFieldNumber;
const int Weights::kValueFieldNumber;
const int Weights::kIp1ValWFieldNumber;
const int Weights::kIp1ValBFieldNumber;
const int Weights::kIp2ValWFieldNumber;
const int Weights::kIp2ValBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weights::Weights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Weights.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Weights)
}
Weights::Weights(const Weights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      residual_(from.residual_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::pblczero::Weights_ConvBlock(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_policy()) {
    policy_ = new ::pblczero::Weights_ConvBlock(*from.policy_);
  } else {
    policy_ = NULL;
  }
  if (from.has_ip_pol_w()) {
    ip_pol_w_ = new ::pblczero::Weights_Layer(*from.ip_pol_w_);
  } else {
    ip_pol_w_ = NULL;
  }
  if (from.has_ip_pol_b()) {
    ip_pol_b_ = new ::pblczero::Weights_Layer(*from.ip_pol_b_);
  } else {
    ip_pol_b_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::pblczero::Weights_ConvBlock(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_ip1_val_w()) {
    ip1_val_w_ = new ::pblczero::Weights_Layer(*from.ip1_val_w_);
  } else {
    ip1_val_w_ = NULL;
  }
  if (from.has_ip1_val_b()) {
    ip1_val_b_ = new ::pblczero::Weights_Layer(*from.ip1_val_b_);
  } else {
    ip1_val_b_ = NULL;
  }
  if (from.has_ip2_val_w()) {
    ip2_val_w_ = new ::pblczero::Weights_Layer(*from.ip2_val_w_);
  } else {
    ip2_val_w_ = NULL;
  }
  if (from.has_ip2_val_b()) {
    ip2_val_b_ = new ::pblczero::Weights_Layer(*from.ip2_val_b_);
  } else {
    ip2_val_b_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pblczero.Weights)
}

void Weights::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip2_val_b_) -
      reinterpret_cast<char*>(&input_)) + sizeof(ip2_val_b_));
}

Weights::~Weights() {
  // @@protoc_insertion_point(destructor:pblczero.Weights)
  SharedDtor();
}

void Weights::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete policy_;
  if (this != internal_default_instance()) delete ip_pol_w_;
  if (this != internal_default_instance()) delete ip_pol_b_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete ip1_val_w_;
  if (this != internal_default_instance()) delete ip1_val_b_;
  if (this != internal_default_instance()) delete ip2_val_w_;
  if (this != internal_default_instance()) delete ip2_val_b_;
}

void Weights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Weights::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weights& Weights::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Weights.base);
  return *internal_default_instance();
}


void Weights::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  residual_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != NULL);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(policy_ != NULL);
      policy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ip_pol_w_ != NULL);
      ip_pol_w_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ip_pol_b_ != NULL);
      ip_pol_b_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ip1_val_w_ != NULL);
      ip1_val_w_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ip1_val_b_ != NULL);
      ip1_val_b_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ip2_val_w_ != NULL);
      ip2_val_w_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(ip2_val_b_ != NULL);
    ip2_val_b_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Weights)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pblczero.Weights.ConvBlock input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pblczero.Weights.Residual residual = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_residual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.ConvBlock policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip_pol_w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_pol_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip_pol_b = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_pol_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.ConvBlock value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip1_val_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip1_val_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip1_val_b = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip1_val_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip2_val_w = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip2_val_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights.Layer ip2_val_b = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip2_val_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Weights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Weights)
  return false;
#undef DO_
}

void Weights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_input(), output);
  }

  // repeated .pblczero.Weights.Residual residual = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->residual_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->residual(static_cast<int>(i)),
      output);
  }

  // optional .pblczero.Weights.ConvBlock policy = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_policy(), output);
  }

  // optional .pblczero.Weights.Layer ip_pol_w = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ip_pol_w(), output);
  }

  // optional .pblczero.Weights.Layer ip_pol_b = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ip_pol_b(), output);
  }

  // optional .pblczero.Weights.ConvBlock value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_value(), output);
  }

  // optional .pblczero.Weights.Layer ip1_val_w = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_ip1_val_w(), output);
  }

  // optional .pblczero.Weights.Layer ip1_val_b = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ip1_val_b(), output);
  }

  // optional .pblczero.Weights.Layer ip2_val_w = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_ip2_val_w(), output);
  }

  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_ip2_val_b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Weights)
}

::google::protobuf::uint8* Weights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Weights.ConvBlock input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_input(), deterministic, target);
  }

  // repeated .pblczero.Weights.Residual residual = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->residual_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->residual(static_cast<int>(i)), deterministic, target);
  }

  // optional .pblczero.Weights.ConvBlock policy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_policy(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip_pol_w = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ip_pol_w(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip_pol_b = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ip_pol_b(), deterministic, target);
  }

  // optional .pblczero.Weights.ConvBlock value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_value(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip1_val_w = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_ip1_val_w(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip1_val_b = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ip1_val_b(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip2_val_w = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_ip2_val_w(), deterministic, target);
  }

  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_ip2_val_b(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Weights)
  return target;
}

size_t Weights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Weights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pblczero.Weights.Residual residual = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->residual_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->residual(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .pblczero.Weights.ConvBlock input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional .pblczero.Weights.ConvBlock policy = 3;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *policy_);
    }

    // optional .pblczero.Weights.Layer ip_pol_w = 4;
    if (has_ip_pol_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ip_pol_w_);
    }

    // optional .pblczero.Weights.Layer ip_pol_b = 5;
    if (has_ip_pol_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ip_pol_b_);
    }

    // optional .pblczero.Weights.ConvBlock value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .pblczero.Weights.Layer ip1_val_w = 7;
    if (has_ip1_val_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ip1_val_w_);
    }

    // optional .pblczero.Weights.Layer ip1_val_b = 8;
    if (has_ip1_val_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ip1_val_b_);
    }

    // optional .pblczero.Weights.Layer ip2_val_w = 9;
    if (has_ip2_val_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ip2_val_w_);
    }

  }
  // optional .pblczero.Weights.Layer ip2_val_b = 10;
  if (has_ip2_val_b()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ip2_val_b_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Weights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Weights)
  GOOGLE_DCHECK_NE(&from, this);
  const Weights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Weights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Weights)
    MergeFrom(*source);
  }
}

void Weights::MergeFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Weights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  residual_.MergeFrom(from.residual_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_input()->::pblczero::Weights_ConvBlock::MergeFrom(from.input());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_policy()->::pblczero::Weights_ConvBlock::MergeFrom(from.policy());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ip_pol_w()->::pblczero::Weights_Layer::MergeFrom(from.ip_pol_w());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ip_pol_b()->::pblczero::Weights_Layer::MergeFrom(from.ip_pol_b());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_value()->::pblczero::Weights_ConvBlock::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ip1_val_w()->::pblczero::Weights_Layer::MergeFrom(from.ip1_val_w());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ip1_val_b()->::pblczero::Weights_Layer::MergeFrom(from.ip1_val_b());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_ip2_val_w()->::pblczero::Weights_Layer::MergeFrom(from.ip2_val_w());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_ip2_val_b()->::pblczero::Weights_Layer::MergeFrom(from.ip2_val_b());
  }
}

void Weights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Weights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weights::CopyFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Weights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights::IsInitialized() const {
  return true;
}

void Weights::Swap(Weights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weights::InternalSwap(Weights* other) {
  using std::swap;
  CastToBase(&residual_)->InternalSwap(CastToBase(&other->residual_));
  swap(input_, other->input_);
  swap(policy_, other->policy_);
  swap(ip_pol_w_, other->ip_pol_w_);
  swap(ip_pol_b_, other->ip_pol_b_);
  swap(value_, other->value_);
  swap(ip1_val_w_, other->ip1_val_w_);
  swap(ip1_val_b_, other->ip1_val_b_);
  swap(ip2_val_w_, other->ip2_val_w_);
  swap(ip2_val_b_, other->ip2_val_b_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Weights::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrainingParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainingParams::kTrainingStepsFieldNumber;
const int TrainingParams::kLearningRateFieldNumber;
const int TrainingParams::kMseLossFieldNumber;
const int TrainingParams::kPolicyLossFieldNumber;
const int TrainingParams::kAccuracyFieldNumber;
const int TrainingParams::kLc0ParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainingParams::TrainingParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_TrainingParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.TrainingParams)
}
TrainingParams::TrainingParams(const TrainingParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lc0_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lc0_params()) {
    lc0_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lc0_params_);
  }
  ::memcpy(&training_steps_, &from.training_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:pblczero.TrainingParams)
}

void TrainingParams::SharedCtor() {
  lc0_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&training_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
}

TrainingParams::~TrainingParams() {
  // @@protoc_insertion_point(destructor:pblczero.TrainingParams)
  SharedDtor();
}

void TrainingParams::SharedDtor() {
  lc0_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrainingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrainingParams::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrainingParams& TrainingParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_TrainingParams.base);
  return *internal_default_instance();
}


void TrainingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.TrainingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lc0_params_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&training_steps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accuracy_) -
        reinterpret_cast<char*>(&training_steps_)) + sizeof(accuracy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrainingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.TrainingParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 training_steps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_training_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &training_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float learning_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_learning_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mse_loss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_mse_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mse_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float policy_loss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_policy_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &policy_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accuracy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lc0_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lc0_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lc0_params().data(), static_cast<int>(this->lc0_params().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pblczero.TrainingParams.lc0_params");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.TrainingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.TrainingParams)
  return false;
#undef DO_
}

void TrainingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.TrainingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 training_steps = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->training_steps(), output);
  }

  // optional float learning_rate = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  // optional float mse_loss = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mse_loss(), output);
  }

  // optional float policy_loss = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->policy_loss(), output);
  }

  // optional float accuracy = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->accuracy(), output);
  }

  // optional string lc0_params = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lc0_params().data(), static_cast<int>(this->lc0_params().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pblczero.TrainingParams.lc0_params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lc0_params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.TrainingParams)
}

::google::protobuf::uint8* TrainingParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.TrainingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 training_steps = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->training_steps(), target);
  }

  // optional float learning_rate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  // optional float mse_loss = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mse_loss(), target);
  }

  // optional float policy_loss = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->policy_loss(), target);
  }

  // optional float accuracy = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->accuracy(), target);
  }

  // optional string lc0_params = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lc0_params().data(), static_cast<int>(this->lc0_params().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pblczero.TrainingParams.lc0_params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lc0_params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.TrainingParams)
  return target;
}

size_t TrainingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.TrainingParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string lc0_params = 6;
    if (has_lc0_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lc0_params());
    }

    // optional uint32 training_steps = 1;
    if (has_training_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->training_steps());
    }

    // optional float learning_rate = 2;
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float mse_loss = 3;
    if (has_mse_loss()) {
      total_size += 1 + 4;
    }

    // optional float policy_loss = 4;
    if (has_policy_loss()) {
      total_size += 1 + 4;
    }

    // optional float accuracy = 5;
    if (has_accuracy()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainingParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.TrainingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrainingParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.TrainingParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.TrainingParams)
    MergeFrom(*source);
  }
}

void TrainingParams::MergeFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.TrainingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lc0_params();
      lc0_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lc0_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      training_steps_ = from.training_steps_;
    }
    if (cached_has_bits & 0x00000004u) {
      learning_rate_ = from.learning_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      mse_loss_ = from.mse_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      policy_loss_ = from.policy_loss_;
    }
    if (cached_has_bits & 0x00000020u) {
      accuracy_ = from.accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainingParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.TrainingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingParams::CopyFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.TrainingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingParams::IsInitialized() const {
  return true;
}

void TrainingParams::Swap(TrainingParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainingParams::InternalSwap(TrainingParams* other) {
  using std::swap;
  lc0_params_.Swap(&other->lc0_params_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(training_steps_, other->training_steps_);
  swap(learning_rate_, other->learning_rate_);
  swap(mse_loss_, other->mse_loss_);
  swap(policy_loss_, other->policy_loss_);
  swap(accuracy_, other->accuracy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrainingParams::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Format::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Format::kWeightsEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Format::Format()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Format.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Format)
}
Format::Format(const Format& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_encoding_ = from.weights_encoding_;
  // @@protoc_insertion_point(copy_constructor:pblczero.Format)
}

void Format::SharedCtor() {
  weights_encoding_ = 0;
}

Format::~Format() {
  // @@protoc_insertion_point(destructor:pblczero.Format)
  SharedDtor();
}

void Format::SharedDtor() {
}

void Format::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Format::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Format& Format::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Format.base);
  return *internal_default_instance();
}


void Format::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Format)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_encoding_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Format::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Format)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pblczero.Format.Encoding weights_encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pblczero::Format_Encoding_IsValid(value)) {
            set_weights_encoding(static_cast< ::pblczero::Format_Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Format)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Format)
  return false;
#undef DO_
}

void Format::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Format)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Format.Encoding weights_encoding = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->weights_encoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Format)
}

::google::protobuf::uint8* Format::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Format)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pblczero.Format.Encoding weights_encoding = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->weights_encoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Format)
  return target;
}

size_t Format::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Format)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .pblczero.Format.Encoding weights_encoding = 1;
  if (has_weights_encoding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->weights_encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Format::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Format)
  GOOGLE_DCHECK_NE(&from, this);
  const Format* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Format>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Format)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Format)
    MergeFrom(*source);
  }
}

void Format::MergeFrom(const Format& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Format)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weights_encoding()) {
    set_weights_encoding(from.weights_encoding());
  }
}

void Format::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Format)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Format::CopyFrom(const Format& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Format)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Format::IsInitialized() const {
  return true;
}

void Format::Swap(Format* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Format::InternalSwap(Format* other) {
  using std::swap;
  swap(weights_encoding_, other->weights_encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Format::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Net::InitAsDefaultInstance() {
  ::pblczero::_Net_default_instance_._instance.get_mutable()->min_version_ = const_cast< ::pblczero::EngineVersion*>(
      ::pblczero::EngineVersion::internal_default_instance());
  ::pblczero::_Net_default_instance_._instance.get_mutable()->format_ = const_cast< ::pblczero::Format*>(
      ::pblczero::Format::internal_default_instance());
  ::pblczero::_Net_default_instance_._instance.get_mutable()->training_params_ = const_cast< ::pblczero::TrainingParams*>(
      ::pblczero::TrainingParams::internal_default_instance());
  ::pblczero::_Net_default_instance_._instance.get_mutable()->weights_ = const_cast< ::pblczero::Weights*>(
      ::pblczero::Weights::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Net::kMagicFieldNumber;
const int Net::kLicenseFieldNumber;
const int Net::kMinVersionFieldNumber;
const int Net::kFormatFieldNumber;
const int Net::kTrainingParamsFieldNumber;
const int Net::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Net::Net()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fnet_2eproto::scc_info_Net.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pblczero.Net)
}
Net::Net(const Net& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_license()) {
    license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  if (from.has_min_version()) {
    min_version_ = new ::pblczero::EngineVersion(*from.min_version_);
  } else {
    min_version_ = NULL;
  }
  if (from.has_format()) {
    format_ = new ::pblczero::Format(*from.format_);
  } else {
    format_ = NULL;
  }
  if (from.has_training_params()) {
    training_params_ = new ::pblczero::TrainingParams(*from.training_params_);
  } else {
    training_params_ = NULL;
  }
  if (from.has_weights()) {
    weights_ = new ::pblczero::Weights(*from.weights_);
  } else {
    weights_ = NULL;
  }
  magic_ = from.magic_;
  // @@protoc_insertion_point(copy_constructor:pblczero.Net)
}

void Net::SharedCtor() {
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_) -
      reinterpret_cast<char*>(&min_version_)) + sizeof(magic_));
}

Net::~Net() {
  // @@protoc_insertion_point(destructor:pblczero.Net)
  SharedDtor();
}

void Net::SharedDtor() {
  license_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_version_;
  if (this != internal_default_instance()) delete format_;
  if (this != internal_default_instance()) delete training_params_;
  if (this != internal_default_instance()) delete weights_;
}

void Net::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Net::descriptor() {
  ::protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Net& Net::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fnet_2eproto::scc_info_Net.base);
  return *internal_default_instance();
}


void Net::Clear() {
// @@protoc_insertion_point(message_clear_start:pblczero.Net)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      license_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(min_version_ != NULL);
      min_version_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(format_ != NULL);
      format_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(training_params_ != NULL);
      training_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(weights_ != NULL);
      weights_->Clear();
    }
  }
  magic_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Net::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pblczero.Net)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 magic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_magic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string license = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license().data(), static_cast<int>(this->license().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pblczero.Net.license");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.EngineVersion min_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Format format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.TrainingParams training_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_training_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pblczero.Weights weights = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pblczero.Net)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pblczero.Net)
  return false;
#undef DO_
}

void Net::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pblczero.Net)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 magic = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->magic(), output);
  }

  // optional string license = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), static_cast<int>(this->license().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pblczero.Net.license");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->license(), output);
  }

  // optional .pblczero.EngineVersion min_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_min_version(), output);
  }

  // optional .pblczero.Format format = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_format(), output);
  }

  // optional .pblczero.TrainingParams training_params = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_training_params(), output);
  }

  // optional .pblczero.Weights weights = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_weights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pblczero.Net)
}

::google::protobuf::uint8* Net::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pblczero.Net)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 magic = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->magic(), target);
  }

  // optional string license = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), static_cast<int>(this->license().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pblczero.Net.license");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->license(), target);
  }

  // optional .pblczero.EngineVersion min_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_min_version(), deterministic, target);
  }

  // optional .pblczero.Format format = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_format(), deterministic, target);
  }

  // optional .pblczero.TrainingParams training_params = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_training_params(), deterministic, target);
  }

  // optional .pblczero.Weights weights = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_weights(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pblczero.Net)
  return target;
}

size_t Net::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pblczero.Net)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string license = 2;
    if (has_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license());
    }

    // optional .pblczero.EngineVersion min_version = 3;
    if (has_min_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *min_version_);
    }

    // optional .pblczero.Format format = 4;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional .pblczero.TrainingParams training_params = 5;
    if (has_training_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *training_params_);
    }

    // optional .pblczero.Weights weights = 10;
    if (has_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional fixed32 magic = 1;
    if (has_magic()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Net::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pblczero.Net)
  GOOGLE_DCHECK_NE(&from, this);
  const Net* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Net>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pblczero.Net)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pblczero.Net)
    MergeFrom(*source);
  }
}

void Net::MergeFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pblczero.Net)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_license();
      license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_min_version()->::pblczero::EngineVersion::MergeFrom(from.min_version());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_format()->::pblczero::Format::MergeFrom(from.format());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_training_params()->::pblczero::TrainingParams::MergeFrom(from.training_params());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_weights()->::pblczero::Weights::MergeFrom(from.weights());
    }
    if (cached_has_bits & 0x00000020u) {
      magic_ = from.magic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Net::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pblczero.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Net::CopyFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pblczero.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net::IsInitialized() const {
  return true;
}

void Net::Swap(Net* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Net::InternalSwap(Net* other) {
  using std::swap;
  license_.Swap(&other->license_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_version_, other->min_version_);
  swap(format_, other->format_);
  swap(training_params_, other->training_params_);
  swap(weights_, other->weights_);
  swap(magic_, other->magic_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Net::GetMetadata() const {
  protobuf_proto_2fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pblczero
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::EngineVersion* Arena::CreateMaybeMessage< ::pblczero::EngineVersion >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::EngineVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Weights_Layer* Arena::CreateMaybeMessage< ::pblczero::Weights_Layer >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Weights_Layer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Weights_ConvBlock* Arena::CreateMaybeMessage< ::pblczero::Weights_ConvBlock >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Weights_ConvBlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Weights_Residual* Arena::CreateMaybeMessage< ::pblczero::Weights_Residual >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Weights_Residual >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Weights* Arena::CreateMaybeMessage< ::pblczero::Weights >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Weights >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::TrainingParams* Arena::CreateMaybeMessage< ::pblczero::TrainingParams >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::TrainingParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Format* Arena::CreateMaybeMessage< ::pblczero::Format >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Format >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pblczero::Net* Arena::CreateMaybeMessage< ::pblczero::Net >(Arena* arena) {
  return Arena::CreateInternal< ::pblczero::Net >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
